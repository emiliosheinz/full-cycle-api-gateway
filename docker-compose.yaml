version: '3.7'

networks:
  kong-net:
    external: false

volumes:
  postgres_data:
    driver: local

services:
  kong-database:
    image: postgres:9.6
    deploy:
      restart_policy:
        condition: any
    networks:
      - kong-net
    environment:
      POSTGRES_USER: kong
      POSTGRES_DB: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'kong']
      interval: 10s
      timeout: 5s
      retries: 5

  kong-migration-bootsrap:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - kong-net
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap

  kong-migration-up:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - kong-net
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations up

  kong:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      restart_policy:
        condition: any
    networks:
      - kong-net
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_DATABASE: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
      KONG_PROXY_ADMIN_API_PORT: 8001
      KONG_PROXY_ADMIN_SSL_API_PORT: 8444
      KONG_PLUGINS: bundled, oidc, kong-jwt2header, kong-upstream-jwt
    ports:
      - 80:8000
      - 443:8443
      - 8001:8001
      - 8444:8444
    healthcheck:
      test: ['CMD-SHELL', 'curl -I -s -L http://127.0.0.1:8000 || exit 1']
      interval: 5s
      retries: 10
    restart: on-failure

  players:
    image: claudioed/players
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure

  championships:
    image: claudioed/championships
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure

  matches:
    image: claudioed/matches
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure

  bets:
    image: claudioed/bets
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
    ports:
      - 9999:9999
    environment:
      - MATCH_SVC=http://matches:9999/api/matches/6c51d4dd-e277-4282-9c51-871ba7fb16b3
      - CHAMPIONSHIP_SVC=http://championships:9999/api/championships/144954fe-b6c3-4a51-80d3-92911a06265c
      - PLAYER_SVC=http://players:9999/api/players/144954fe-b6c3-4a51-80d3-92911a06265c

  postgres:
    image: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:legacy
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
    ports:
      - 8080:8080
    depends_on:
      - postgres

  konga:
    image: pantsel/konga
    networks:
      - kong-net
    deploy:
      restart_policy:
        condition: on-failure
    depends_on:
      - kong-database
    environment:
      NODE_ENV: development
    ports:
      - 1337:1337
